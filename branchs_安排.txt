几种分支

1，建立master分支   【一直往前走  合并 合并】
1.1，目的：新建仓库时候默认分支，一般为生产环境。
1.2，方法：新建仓库   一直在往前走合并 合并 合并

2，建立develop分支  【开发分支 合并到master】
2.1，目的：保持生产环境稳定，新建开发环境
2.2，方法：   开发分支 合并到master   

3，建立功能分支     【开发分支 合并到master】
feature分支（topic分支）
3.1，目的：在
3.2，方法：来源于开发分支，最终回归到开发分支。按照功能回归的时间不同，可以分为远期分支和近期分支，远期分支准备合并到未来版本，近期分支合并到下一个即将发布的版本。

4，建立release分支   【来自master分支  有多个 从mastet checkout 出去】
4.1，目的：发布新版本用，命名规则是release-xxx-vx.x，从develop来，合并了所有本周期的feature，最终要合并到master和develop。相当于产品发布前，交给测试的版本？
4.2，方法：
【生产上就是在release版本之间不断的切换】


5，建立hotfix分支  【开发分支 合并到master】
5.1，目的：修复线上bug，一般基于master，当前线上有bug，但是develop还不稳定，功能开发、测试到一半。此时基于master建立hotfix-分支，及时处理小bug，之后将分支分别合并到master和develop，
本分支生命周期结束。hotfix热修复分支与release分支都是面向master的，即为发布线上版本而生。

开发流程
master -----> release 
  ∨
  ∨ 
  ∨ 
  ∨ 
  debug   feature  develope
  ∨ 
  ∨ 
master -----> release 
  ∨ 
  ∨ 
  ∨ 
  ∨ 

  
 1. release 有问题  因为master是和release相同的  从master建立debug分支 再merge到master  再merger到release
    debug的处理是有点麻烦

 2. release分支是不动的  release分支的来源只有从master合并或者切换出来

 3. debug 的处理从 master 切换分支开始

 4.
 